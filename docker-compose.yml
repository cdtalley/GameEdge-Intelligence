version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gameedge_postgres
    environment:
      POSTGRES_DB: gameedge_db
      POSTGRES_USER: gameedge_user
      POSTGRES_PASSWORD: gameedge_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gameedge_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameedge_user -d gameedge_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: gameedge_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gameedge_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gameedge_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://gameedge_user:gameedge_password@postgres:5432/gameedge_db
      - DATABASE_SYNC_URL=postgresql://gameedge_user:gameedge_password@postgres:5432/gameedge_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - DEBUG=true
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend/models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gameedge_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gameedge_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - gameedge_network
    restart: unless-stopped

  # ML Model Training Service (Optional)
  ml_training:
    build:
      context: ./backend
      dockerfile: Dockerfile.ml
    container_name: gameedge_ml_training
    environment:
      - DATABASE_URL=postgresql+asyncpg://gameedge_user:gameedge_password@postgres:5432/gameedge_db
      - ML_MODEL_PATH=/app/models
      - TRAINING_MODE=true
    volumes:
      - ./backend:/app
      - ./backend/models:/app/models
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gameedge_network
    profiles:
      - training
    restart: unless-stopped

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: gameedge_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gameedge_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: gameedge_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - gameedge_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gameedge_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
